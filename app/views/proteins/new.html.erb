<div class="form">
    <h1 class="text-center">プロテイン情報を入力</h1>
    <%= form_with(model: @protein, local: true, id: "form") do |f| %>
        <div class="my-5">
            <h4>◆プロテイン画像</h4>
            <P>最大5枚までアップロードできます</P>
            <div class="text-center" id="imageBox"></div>
            <div class="bg-secondary text-center py-2 pointer" id="camera" style="width: 100%; height: 100px;">
                <i class="bi bi-camera-fill" style="font-size: 35px;"></i>
                <p style="font-size: 13px;">クリックして画像をアップロード</p>
            </div>
        </div>
        <input accept="image/*" type="file" name="protein[protein_images][]" class="getImages inputImage display_none" id="1">  <!-- ここは本来は<%= f.file_field :avatars %>とかきたかったがこれをするとmultiplate: trueがないとはじからパラメータで弾かれる 今回はmultiplateはなしにしたいのでこのような形になった -->
        <input accept="image/*" type="file" name="protein[protein_images][]" class="getImages inputImage display_none" id="2">
        <input accept="image/*" type="file" name="protein[protein_images][]" class="getImages inputImage display_none" id="3">
        <input accept="image/*" type="file" name="protein[protein_images][]" class="getImages inputImage display_none" id="4">
        <input accept="image/*" type="file" name="protein[protein_images][]" class="getImages inputImage display_none" id="5">

        <div class="my-5">
            <h4>◆プロテイン名</h4>
            <%= f.text_field :name, class: "form-control name_form", id: "exampleFormControlInput1" %>
        </div>

        <div class="my-5">
            <h4>◆値段</h4>
            <div>
                <%= f.number_field :price, class: "form-control number-field price_form" %>円
            </div>
        </div>

        <div class="my-5">
            <h4>◆内容量</h4>
            <div>
                <%= f.number_field :large_height, class: "form-control number-field large_height_form" %>g
            </div>
        </div>

        <div class="my-5">
            <h4>◆タンパク質含有量</h4>
            <div>
                <%= f.number_field :height, class: "form-control number-field height_form", placeholder: "1食分の量" %>g<span class="mx-2">当たり</span><%= f.number_field :protein_height, class: "form-control number-field protein_height_form", placeholder: "タンパク質の量" %>g
                <p class='invalid-feedback'>${message}</p>
            </div>
        </div>

        <div class="my-5">
            <h4>◆特徴</h4>
            <%= f.text_area :feature, class: "form-control feature_form", style: "height: 200px;", id: "exampleFormControlInput2", placeholder: "おすすめの飲み方などを入力してください" %>
        </div>

        <div class="text-center my-5">
            <%= f.submit "登録", class: "btn btn-danger w-100", style: "height: 60px;" %>
        </div>
    <% end %>
</div>


<% if @protein.errors.messages.present? %>
    <script>
        let inputs = document.querySelectorAll('.field_with_errors *');
        inputs.forEach((input)=>{
            input.classList.add("is-invalid");
            if (input.classList.contains("name_form")) {
                gon.name_error_messages.forEach((message)=>{
                    let html = `<p class='invalid-feedback'>${message}</p>`
                    input.insertAdjacentHTML('afterend', html);
                });
            }
            else if(input.classList.contains("feature_form")) {
                gon.feature_error_messages.forEach((message)=>{
                    let html = `<p class='invalid-feedback'>${message}</p>`
                    input.insertAdjacentHTML('afterend', html);
                });
            }
            else if(input.classList.contains("price_form")) {
                gon.price_error_messages.forEach((message)=>{
                    let html = `<p class='invalid-feedback'>${message}</p>`
                    input.insertAdjacentHTML('afterend', html);
                });
            }
            else if(input.classList.contains("height_form")) {
                gon.height_error_messages.forEach((message)=>{
                    let html = `<p class='invalid-feedback'>${message}</p>`
                    input.insertAdjacentHTML('afterend', html);
                });
            }
            else if(input.classList.contains("protein_height_form")) {
                gon.protein_height_error_messages.forEach((message)=>{
                    let html = `<p class='invalid-feedback'>${message}</p>`
                    input.insertAdjacentHTML('afterend', html);
                });
            }
            else if(input.classList.contains("large_height_form")) {
                gon.large_height_error_messages.forEach((message)=>{
                    let html = `<p class='invalid-feedback'>${message}</p>`
                    input.insertAdjacentHTML('afterend', html);
                });
            }
        });
    </script>
<% end %>
